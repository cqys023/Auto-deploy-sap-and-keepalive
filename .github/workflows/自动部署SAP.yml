name: 部署 SAP 应用

on:
  workflow_dispatch:
    inputs:
      type:
        description: '部署类型'
        required: true
        default: 'ws直连'
        type: choice
        options:
          - ws直连
          - wss中转
      region:
        description: '部署区域'
        required: true
        default: 'US(free)'
        type: choice
        options:
          - SG(free)
          - US(free)
          - AWS-AU(Sydney)
          - AWS-BR(São Paulo)
          - AWS-CA(Toronto)
          - AWS-JP(Tokyo)
          - AWS-US(Virginia)
          - Azure-HK
          - Azure-US(Virginia)
          - Azure-DE(Frankfurt)
          - GCP-US(Lowa)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置应用名
        run: |
          RANDOM_STR=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 6 | head -n 1)
          TYPE_SLUG=$(echo "${{ github.event.inputs.type }}" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
          REGION_SLUG=$(echo "${{ github.event.inputs.region }}" | tr -d '() ' | tr '[:upper:]' '[:lower:]')
          echo "APP_NAME=${TYPE_SLUG}-${REGION_SLUG}-${RANDOM_STR}" >> $GITHUB_ENV
          echo "生成的应用名: ${TYPE_SLUG}-${REGION_SLUG}-${RANDOM_STR}"

      - name: 配置 CF API 地址
        run: |
          declare -A CF_APIS=(
            ["SG(free)"]="https://api.cf.ap21.hana.ondemand.com"
            ["US(free)"]="https://api.cf.us10-001.hana.ondemand.com"
            ["AWS-AU(Sydney)"]="https://api.cf.ap10.hana.ondemand.com"
            ["AWS-BR(São Paulo)"]="https://api.cf.br10.hana.ondemand.com"
            ["AWS-CA(Toronto)"]="https://api.cf.ca10.hana.ondemand.com"
            ["AWS-JP(Tokyo)"]="https://api.cf.jp10.hana.ondemand.com"
            ["AWS-US(Virginia)"]="https://api.cf.us10.hana.ondemand.com"
            ["Azure-HK"]="https://api.cf.hk10.hana.ondemand.com"
            ["Azure-US(Virginia)"]="https://api.cf.us20.hana.ondemand.com"
            ["Azure-DE(Frankfurt)"]="https://api.cf.eu20.hana.ondemand.com"
            ["GCP-US(Lowa)"]="https://api.cf.us30.hana.ondemand.com"
          )

          REGION="${{ github.event.inputs.region }}"
          CF_API="${CF_APIS[$REGION]}"

          if [ -z "$CF_API" ]; then
            echo "❌ 未识别的区域: $REGION"
            exit 1
          fi

          echo "CF_API=$CF_API" >> $GITHUB_ENV
          echo "目标 CF API: $CF_API"

      - name: 安装 CF CLI
        run: |
          wget -q -O cf.deb https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github
          sudo dpkg -i cf.deb

      - name: 登录 CF
        run: |
          cf login -a ${{ env.CF_API }} \
            -u "${{ secrets.EMAIL }}" \
            -p "${{ secrets.PASSWORD }}" \
            --skip-ssl-validation
          ORG=$(cf orgs | awk 'NR>3 {print $1; exit}')
          SPACE=$(cf spaces | awk 'NR>3 {print $1; exit}')
          cf target -o "$ORG" -s "$SPACE"

      - name: 部署应用
        run: |
          set -e
          echo "🚀 开始部署应用: ${{ env.APP_NAME }}"
          if ! cf push ${{ env.APP_NAME }} \
            --docker-image ${{ env.DOCKER_IMAGE }} \
            -m ${{ env.MEMORY }} -k 256M --health-check-type port --no-start; then

            echo "⚠️ 部署失败，正在收集日志..."
            cf logs ${{ env.APP_NAME }} --recent || true

            if cf logs ${{ env.APP_NAME }} --recent | grep -qi "insufficient resources"; then
              echo "❌ 部署失败：当前区域资源不足，可以尝试换个区域，或在早上 8:20~9:00 再部署。"
            elif cf logs ${{ env.APP_NAME }} --recent | grep -qi "out of memory"; then
              echo "❌ 部署失败：内存不足，请尝试提高内存（例如 -m 512M -k 512M）。"
            elif cf logs ${{ env.APP_NAME }} --recent | grep -qi "image"; then
              echo "❌ 部署失败：Docker 镜像拉取错误，请检查镜像地址是否正确、可访问。"
            elif cf logs ${{ env.APP_NAME }} --recent | grep -qi "crash"; then
              echo "❌ 部署失败：应用启动后崩溃，请检查环境变量或启动命令。"
            else
              echo "❌ 部署失败：未知原因，可能是区域资源不足。"
            fi

            cf delete ${{ env.APP_NAME }} -f
            exit 1
          fi

      - name: 设置环境变量
        run: |
          cf set-env ${{ env.APP_NAME }} NAME "SAP"
          cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"

      - name: 启动应用
        run: |
          cf start ${{ env.APP_NAME }}
          cf restage ${{ env.APP_NAME }}
          echo "✅ 应用已启动并完成 restage"

      - name: 验证应用状态
        run: |
          cf apps | grep ${{ env.APP_NAME }}

      - name: 输出应用信息
        run: |
          APP_URL="https://$(cf app ${{ env.APP_NAME }} | grep routes: | awk '{print $2}')"
          echo "::notice::🚀 部署完成: 应用 ${{ env.APP_NAME }}"
          echo "::notice::🌐 访问地址: $APP_URL"
          echo "::notice::📍 区域: ${{ github.event.inputs.region }}"
          echo "::notice::🔖 部署类型: ${{ github.event.inputs.type }}"
