name: Ëá™Âä®ÈÉ®ÁΩ≤ SAP

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'ÈÄâÊã©ÈÉ®ÁΩ≤ÁöÑËäÇÁÇπÁ±ªÂûã'
        required: true
        default: 'ArgoÈößÈÅìCDN'
        type: choice
        options:
          - wsÁõ¥Ëøû
          - xhttpÁõ¥Ëøû
          - ArgoÈößÈÅìCDN
      region:
        description: 'ÈÄâÊã©ÈÉ®ÁΩ≤Âå∫Âüü'
        required: true
        default: 'US(free)'
        type: choice
        options:
          - SG(free)       # azureÊñ∞Âä†Êä´
          - US(free)       # awsÁæéÂõΩ
          - AWS-AU(Sydney)
          - AWS-BR(S√£o Paulo)
          - AWS-KR(Seoul)
          - AWS-CA(Montreal)
          - AWS-US(VA)
          - AWS-US(OR)
          - AWS-EU(Frankfurt)
          - AWS-JP(Tokyo)
          - AWS-SG(Singapore)
          - GCP-AU(Sydney)
          - GCP-BR(S√£o Paulo)
          - GCP-US(IA)
          - GCP-EU(Frankfurt)
          - GCP-JP(Osaka)
          - GCP-JP(Tokyo)
          - GCP-IL(Tel Aviv)
          - GCP-IN(Mumbai)
          - GCP-KSA(Dammam)
          - Azure-AU(Sydney)
          - Azure-BR(S√£o Paulo)
          - Azure-CA(Montreal)
          - Azure-US(VA)
          - Azure-US(WA)
          - Azure-EU(Netherlands)
          - Azure-JP(Tokyo)
          - Azure-SG(Singapore)
          - Neo-UAE(Dubai)
          - Neo-KSA(Riyadh)
      app_name:
        description: 'Â∫îÁî®ÂêçÁß∞ÔºàÂèØÈÄâÔºåÁïôÁ©∫ÂàôËá™Âä®ÁîüÊàêÔºâ'
        required: false
        default: ''

env:
  MEMORY: 256M
  DISK: 256M

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Configure deployment parameters
      run: |
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)

        # Âå∫ÂüüÊò†Â∞ÑË°®
        declare -A CF_API_MAP=(
          ["SG(free)"]="https://api.cf.ap21.hana.ondemand.com"
          ["US(free)"]="https://api.cf.us10-001.hana.ondemand.com"
          ["AWS-AU(Sydney)"]="https://api.cf.ap10.hana.ondemand.com"
          ["AWS-BR(S√£o Paulo)"]="https://api.cf.br10.hana.ondemand.com"
          ["AWS-KR(Seoul)"]="https://api.cf.ap12.hana.ondemand.com"
          ["AWS-CA(Montreal)"]="https://api.cf.ca10.hana.ondemand.com"
          ["AWS-US(VA)"]="https://api.cf.us10-001.hana.ondemand.com"
          ["AWS-US(OR)"]="https://api.cf.us11.hana.ondemand.com"
          ["AWS-EU(Frankfurt)"]="https://api.cf.eu10-005.hana.ondemand.com"
          ["AWS-JP(Tokyo)"]="https://api.cf.jp10.hana.ondemand.com"
          ["AWS-SG(Singapore)"]="https://api.cf.ap11.hana.ondemand.com"
          ["GCP-AU(Sydney)"]="https://api.cf.ap30.hana.ondemand.com"
          ["GCP-BR(S√£o Paulo)"]="https://api.cf.br30.hana.ondemand.com"
          ["GCP-US(IA)"]="https://api.cf.us30.hana.ondemand.com"
          ["GCP-EU(Frankfurt)"]="https://api.cf.eu30.hana.ondemand.com"
          ["GCP-JP(Osaka)"]="https://api.cf.jp30.hana.ondemand.com"
          ["GCP-JP(Tokyo)"]="https://api.cf.jp31.hana.ondemand.com"
          ["GCP-IL(Tel Aviv)"]="https://api.cf.il30.hana.ondemand.com"
          ["GCP-IN(Mumbai)"]="https://api.cf.in30.hana.ondemand.com"
          ["GCP-KSA(Dammam)"]="https://api.cf.sa31.hana.ondemand.com"
          ["Azure-AU(Sydney)"]="https://api.cf.ap20.hana.ondemand.com"
          ["Azure-BR(S√£o Paulo)"]="https://api.cf.br20.hana.ondemand.com"
          ["Azure-CA(Montreal)"]="https://api.cf.ca20.hana.ondemand.com"
          ["Azure-US(VA)"]="https://api.cf.us21.hana.ondemand.com"
          ["Azure-US(WA)"]="https://api.cf.us20.hana.ondemand.com"
          ["Azure-EU(Netherlands)"]="https://api.cf.eu20.hana.ondemand.com"
          ["Azure-JP(Tokyo)"]="https://api.cf.jp20.hana.ondemand.com"
          ["Azure-SG(Singapore)"]="https://api.cf.ap21.hana.ondemand.com"
          ["Neo-UAE(Dubai)"]="https://api.cf.neo-ae1.hana.ondemand.com"
          ["Neo-KSA(Riyadh)"]="https://api.cf.neo-sa1.hana.ondemand.com"
        )

        REGION="${{ github.event.inputs.region }}"
        CF_API="${CF_API_MAP[$REGION]}"
        APP_NAME="${{ github.event.inputs.app_name }}"

        if [ -z "$APP_NAME" ]; then
          APP_NAME="$(echo "$REGION" | tr '[:upper:]' '[:lower:]' | tr -dc 'a-z')-$RANDOM_STR"
        fi

        if [[ -n "${{ secrets.DOCKER_IMAGE }}" ]]; then
          DOCKER_IMAGE="${{ secrets.DOCKER_IMAGE }}"
        else
          case "${{ github.event.inputs.type }}" in
            "wsÁõ¥Ëøû") DOCKER_IMAGE="ghcr.io/eooce/ws:latest" ;;
            "xhttpÁõ¥Ëøû") DOCKER_IMAGE="ghcr.io/eooce/goxhttp:latest" ;;
            *) DOCKER_IMAGE="ghcr.io/eooce/nodejs:main" ;;
          esac
        fi

        echo "CF_API=$CF_API" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

        echo "‰ΩøÁî®APIÁ´ØÁÇπ: $CF_API"
        echo "Â∫îÁî®ÂêçÁß∞: $APP_NAME"
        echo "ÈÉ®ÁΩ≤Á±ªÂûã: $DOCKER_IMAGE"

    - name: Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" > /dev/null 2>&1
        ORG=$(cf orgs | awk 'NR==4')
        SPACE=$(cf spaces | awk 'NR==4')
        echo "ORG=$ORG" >> $GITHUB_ENV
        echo "SPACE=$SPACE" >> $GITHUB_ENV
        cf target -o "$ORG" -s "$SPACE"

    - name: Deploy application
      run: |
        if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k ${{ env.DISK }} --health-check-type port; then
          echo "‚úÖ Deployment successful"
        else
          cf delete ${{ env.APP_NAME }} -f
          echo "‚ùå ËµÑÊ∫ê‰∏çË∂≥ÔºåÈÉ®ÁΩ≤Â§±Ë¥•ÔºåËØ∑Âú®Êó©‰∏ä 8:20~9:00 ÂÜçÂ∞ùËØïÈÉ®ÁΩ≤"
          exit 1
        fi

    - name: Set environment variables
      run: |
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        if [ -f .env ]; then
          while IFS= read -r line; do
            [[ "$line" =~ ^# || -z "$line" ]] && continue
            IFS='=' read -r key value <<< "$line"
            cf set-env ${{ env.APP_NAME }} "$key" "$value"
          done < .env
        fi

        if [[ "${{ env.DOCKER_IMAGE }}" =~ (xhttp|goxhttp|ws) ]]; then
          ROUTE=$(cf app ${{ env.APP_NAME }} | awk '/routes:/ {print $2}')
          if [ -n "$ROUTE" ]; then
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
          else
            echo "‚ö†Ô∏è Êú™ÊâæÂà∞Â∫îÁî®Ë∑ØÁî±ÔºåËØ∑ÊâãÂä®‰øÆÊîπËäÇÁÇπÈÖçÁΩÆ"
          fi
        fi

    - name: Restage application
      run: cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: cf app ${{ env.APP_NAME }}

    - name: ËØ¶ÁªÜÈÉ®ÁΩ≤‰ø°ÊÅØ
      run: |
        ROUTE=$(cf app ${{ env.APP_NAME }} | awk '/routes:/ {print $2}')
        echo "üöÄ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
        echo "Âå∫Âüü: ${{ github.event.inputs.region }}"
        echo "ÁªÑÁªá: ${{ env.ORG }}"
        echo "Á©∫Èó¥: ${{ env.SPACE }}"
        echo "Â∫îÁî®ÂêçÁß∞: ${{ env.APP_NAME }}"
        echo "Â∫îÁî® URL: ${ROUTE:+https://$ROUTE}"
